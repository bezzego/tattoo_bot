import json
import logging
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app import config

# RU labels for dropdown/enum values
ZONES_RU = {
    "back": "—Å–ø–∏–Ω–∞",
    "chest": "–≥—Ä—É–¥—å",
    "ribs": "—Ä—ë–±—Ä–∞",
    "stomach": "–∂–∏–≤–æ—Ç",
    "shoulder": "–ø–ª–µ—á–æ",
    "arm": "—Ä—É–∫–∞",
    "forearm": "–ø—Ä–µ–¥–ø–ª–µ—á—å–µ",
    "wrist": "–∑–∞–ø—è—Å—Ç—å–µ",
    "hand": "–∫–∏—Å—Ç—å",
    "neck": "—à–µ—è",
    "thigh": "–±–µ–¥—Ä–æ",
    "leg": "–Ω–æ–≥–∞",
    "ankle": "—â–∏–∫–æ–ª–æ—Ç–∫–∞",
    "foot": "—Å—Ç–æ–ø–∞",
    "ear": "—É—Ö–æ",
    "face": "–ª–∏—Ü–æ",
}

SIZES_RU = {
    "small": "–º–∞–ª–µ–Ω—å–∫–∏–π",
    "medium": "—Å—Ä–µ–¥–Ω–∏–π",
    "large": "–±–æ–ª—å—à–æ–π",
    "xl": "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π",
}

WORK_TYPES_RU = {
    "new": "–Ω–æ–≤–∞—è —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∞",
    "coverup": "–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ",
    "fix": "–∫–æ—Ä—Ä–µ–∫—Ü–∏—è",
    "laser": "—É–¥–∞–ª–µ–Ω–∏–µ",
    "piercing": "–ø–∏—Ä—Å–∏–Ω–≥",
}

IDEA_TYPES_RU = {
    "image": "–∫–∞—Ä—Ç–∏–Ω–∫–∞/–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è",
    "text": "—Ç–µ–∫—Å—Ç",
    "portrait": "–ø–æ—Ä—Ç—Ä–µ—Ç",
    "lettering": "–ª–µ—Ç—Ç–µ—Ä–∏–Ω–≥",
    "minimal": "–º–∏–Ω–∏–º–∞–ª–∏–∑–º",
}


async def notify_master(bot: Bot, lead, client):
    """Send a new lead notification to the master (admin)."""
    if not config.RECEIVE_LEADS:
        # If receiving leads is turned off, do not notify
        logging.info("Lead received but notifications are off.")
        return
    # Prepare client info
    username = client.username or ""
    name_or_id = f"@{username}" if username else f"id:{client.tg_user_id}"
    phone = client.phone or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    # Prepare message text
    if lead.source == "sketch":
        # Special format for sketch requests
        design_info = lead.comment or "(—ç—Å–∫–∏–∑)"
        text = (
            "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ üéØ (—ç—Å–∫–∏–∑)\n"
            f"–ö–ª–∏–µ–Ω—Ç: {name_or_id} (id: {client.tg_user_id})\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Å–∫–∏–∑: {design_info}\n"
        )
    else:
        ru_zone = ZONES_RU.get(getattr(lead, "zone", None), lead.zone)
        ru_size = SIZES_RU.get(getattr(lead, "size", None), lead.size)
        ru_work = WORK_TYPES_RU.get(getattr(lead, "work_type", None), lead.work_type)
        ru_idea = IDEA_TYPES_RU.get(getattr(lead, "idea", None), lead.idea)
        text = (
            "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ üéØ\n"
            f"–ö–ª–∏–µ–Ω—Ç: {name_or_id} (id: {client.tg_user_id})\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–ó–æ–Ω–∞: {ru_zone}\n"
            f"–ò–¥–µ—è: {ru_idea}\n"
            f"–†–∞–∑–º–µ—Ä: {ru_size}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {ru_work}\n"
        )
        # Include references indicator if present
        if lead.references_json:
            try:
                refs = json.loads(lead.references_json)
            except json.JSONDecodeError:
                refs = []
            if refs:
                text += "–†–µ—Ñ–µ—Ä–µ–Ω—Å—ã: " + ", ".join(
                    f"[—Ñ–æ—Ç–æ {i}]" for i, _ in enumerate(refs, start=1)
                )
                text += "\n"
        if lead.comment:
            text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {lead.comment}\n"
    # Prepare inline keyboard for quick actions
    kb_rows = [
        [
            InlineKeyboardButton(
                text="–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={client.tg_user_id}"
            )
        ]
    ]
    if username:
        kb_rows.append(
            [
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", url=f"https://t.me/{username}"
                )
            ]
        )
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    # Send the message to master
    try:
        await bot.send_message(config.MASTER_ID, text, reply_markup=kb)
    except Exception as e:
        logging.error(f"Failed to send lead notification to master: {e}")
    # If there are reference photos, send them separately
    if hasattr(lead, "references_json") and lead.references_json:
        try:
            refs = json.loads(lead.references_json)
        except:
            refs = []
        for file_id in refs:
            if file_id:
                try:
                    await bot.send_photo(config.MASTER_ID, file_id)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")
