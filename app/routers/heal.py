from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging
import os

from app import texts, config

# ======= Attachments for healing sections =======
HEALING_PDFS = {
    "classic": "BQACAgIAAxkBAAIDwGiwG8lWZsdbpCJyfnfyZzemzpoiAAKehAACq6GISRcVKol2dQWENgQ",
    "film": "BQACAgIAAxkBAAIDvmiwG8V440VP1ysnnA_M9qFZHXc-AAKdhAACq6GISVbDrbjLAAGi2TYE",
    "piercing": "BQACAgIAAxkBAAIDumiwG6YELn1GJgThkyECs0fMFU-RAAKYhAACq6GISbZzAaUxdLE0NgQ",
    "removal": "BQACAgIAAxkBAAIDvGiwG7vHXmtl0NTkX8zWb-iNdsj-AAKbhAACq6GISehnj7-EDnkvNgQ",
}

HEALING_PHOTOS = {
    "classic": "AgACAgIAAxkBAAPNaKxdDvrghkXjjZRL6UCXDAuyW54AAlL7MRvyMWBJeYDWq1AuUYkBAAMCAAN5AAM2BA",
    "film": "AgACAgIAAxkBAAIDpGiwGAuhDnkAAcU-Si3GQ14K4znq3wACGvUxG6uhiElj2DoRY8ugswEAAwIAA3kAAzYE",
    "piercing": "AgACAgIAAxkBAAIDpmiwGFBiuBs80KndAyI1qdVJyHqJAAIe9TEbq6GIScQIK9zXh_00AQADAgADeQADNgQ",
    "removal": "AgACAgIAAxkBAAPKaKxdDqoCw_RK8GFw661LEaMKbWYAAk_7MRvyMWBJqdLW6-d77fMBAAMCAAN5AAM2BA",
}

HEALING_TITLES = {
    "classic": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ",
    "film": "–ó–∞–∂–∏–≤–ª–µ–Ω–∏–µ –ø–æ–¥ –ø–ª–µ–Ω–∫–æ–π",
    "piercing": "–ó–∞–∂–∏–≤–ª–µ–Ω–∏–µ –ø–∏—Ä—Å–∏–Ω–≥–∞",
    "removal": "–£—Ö–æ–¥ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
}

HEALING_TEXTS = {
    "classic": texts.HEALING_CLASSIC,
    "film": texts.HEALING_FILM,
    "piercing": texts.HEALING_PIERCING,
    "removal": texts.HEALING_REMOVAL,
}
# ============================================================================

router = Router()
logger = logging.getLogger(__name__)


def get_healing_keyboard(current_topic: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∑–∞–∂–∏–≤–ª–µ–Ω–∏—è"""
    buttons = []
    topics = ["classic", "film", "piercing", "removal"]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
    for topic in topics:
        if topic != current_topic:
            button_text = {
                "classic": "‚ú® –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ",
                "film": "üéû –ü–ª–µ–Ω–∫–∞",
                "piercing": "üíé –ü–∏—Ä—Å–∏–Ω–≥",
                "removal": "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ",
            }.get(topic, topic)

            buttons.append(
                InlineKeyboardButton(text=button_text, callback_data=f"heal:{topic}")
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∏ —Å –º–∞—Å—Ç–µ—Ä–æ–º
    buttons.append(
        InlineKeyboardButton(
            text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É", url=f"tg://user?id={config.MASTER_ID}"
        )
    )

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    keyboard = [buttons[i : i + 2] for i in range(0, len(buttons), 2)]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(F.text == texts.MENU_HEALING)
async def show_healing_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∂–∏–≤–ª–µ–Ω–∏—è"""
    await state.clear()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ú® –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ", callback_data="heal:classic"
                ),
                InlineKeyboardButton(text="üéû –ü–ª–µ–Ω–∫–∞", callback_data="heal:film"),
            ],
            [
                InlineKeyboardButton(text="üíé –ü–∏—Ä—Å–∏–Ω–≥", callback_data="heal:piercing"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ", callback_data="heal:removal"),
            ],
        ]
    )

    await message.answer(
        text="ü©π <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∂–∏–≤–ª–µ–Ω–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@router.callback_query(F.data.startswith("heal:"))
async def handle_healing_selection(call: CallbackQuery, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∂–∏–≤–ª–µ–Ω–∏—è"""
    await call.answer()

    topic = call.data.split(":", 1)[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    photo_file_id = HEALING_PHOTOS.get(topic)
    title = HEALING_TITLES.get(topic, "–£—Ö–æ–¥")
    text_content = HEALING_TEXTS.get(topic, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥—Ä—É–≥–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = get_healing_keyboard(topic)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if photo_file_id:
            await call.message.answer_photo(
                photo=photo_file_id,
                caption=f"ü©π <b>{title}</b>\n\n{text_content}",
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await call.message.answer(
                text=f"ü©π <b>{title}</b>\n\n{text_content}",
                reply_markup=keyboard,
                parse_mode="HTML",
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        pdf_file_id = HEALING_PDFS.get(topic)
        if pdf_file_id:
            try:
                await call.message.answer_document(
                    document=pdf_file_id, caption=f"üìÑ –ü–∞–º—è—Ç–∫–∞ –ø–æ {title.lower()}"
                )
            except TelegramBadRequest:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –¥–ª—è {topic}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–∏ {topic}: {e}")

        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
        await call.message.answer(
            text=f"ü©π <b>{title}</b>\n\n{text_content}",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        if pdf_file_id:
            try:
                await call.message.answer_document(
                    document=pdf_file_id, caption=f"üìÑ –ü–∞–º—è—Ç–∫–∞ –ø–æ {title.lower()}"
                )
            except TelegramBadRequest:
                pass
